local *

import Param, Subcommand from require 'clap'

export INPUT_STARVATION_THRESHOLD_KEY = 'input-starvation-threshold'
export OUTPUT_READY_THRESHOLD_KEY =  'output-ready-threshold'
export RESOURCE_KEY = 'resource'

export is_active = (args) -> args.get? or args.set?
export register_args = (parser) -> with parser
  config_keys =
    * INPUT_STARVATION_THRESHOLD_KEY
    * OUTPUT_READY_THRESHOLD_KEY
    * RESOURCE_KEY
  \add with Subcommand 'get'
    \description 'get config value'
    \add with Param 'option'
      \options config_keys
      \description 'config value to print'
  \add with Subcommand 'set'
    \description 'set config value'
    \add with Param 'option'
      \options config_keys
      \description 'config key to set'
    \add with Param 'value'
      \description 'new config value'

export run = (args) ->
  if args.set?
    run_set args.set.option, args.set.value
  else if args.get?
    run_get args.get.option
  else
    error "internal error: could not discern config command"

run_get = (option) ->
  if not settings?
    error 'settings unavailable'

  settings.load!
  print get option
  nil

run_set = (option, value) ->
  if not settings?
    error 'settings unavailable'

  settings.load!
  settings.set (make_config_key option), value
  settings.save!
  nil

export input_starvation_threshold = -> get INPUT_STARVATION_THRESHOLD_KEY, 0.3
export output_ready_threshold = -> get OUTPUT_READY_THRESHOLD_KEY, 0.6
export resource = -> get RESOURCE_KEY
NOT_SET = <tostring>: => "<not-set>"
get = (option, default=NOT_SET) ->
  if not settings?
    error 'settings unavailable'

  settings.load!
  ret = settings.get (make_config_key option), default
  if ret == NOT_SET
    error "missing setting, run:\n`majo set #{option} <value>'"
  ret

make_config_key = (option_name) -> "majo.#{option_name}"
