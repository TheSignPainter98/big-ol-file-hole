local *

import ArgParser, Flag, Param from require 'clap'

quiet = false
verbose = false

main = (args) ->
  arg_parser = with ArgParser 'refresh'
    \version '1.0'
    \description 'a downloader of up-to-date files'
    \add with Param 'user'
      \description 'whose repo to pull from'
    \add with Param 'repo'
      \description 'repo name to pull from'
    \add with Param 'folder'
      \description 'folder to pull from'
      \default nil
    \add with Flag 'quiet'
      \description 'output quietly'
    \add with Flag 'verbose'
      \description 'output verbosely'
    \add with Flag 'url-template'
      \default 'https://raw.githubusercontent.com/{user}/{repo}/{branch}{folder}'
      \description 'where to get the files from'
    \add with Flag 'branch'
      \description 'branch in the repo to pull from'
      \default 'master'
  args, ok = arg_parser\parse args
  if not ok
    return

  quiet = args.quiet
  verbose = args.verbose
  sources_url = make_sources_url args
  ok, err = http.checkUrl source
  if not ok
    print "url invalid: #{err}"
    return
  resp, err = http.get sources_url
  if not resp?
    print err
    return
  local content
  with resp
    content = \readAll!
    \close!
  error "downloading from #{resp}"
  -- TODO(kcza): read the JSON download!

  debug "downloading files from #{source}"
  any_failed = false
  for path in *get_paths '/'
    log "#{path}..."
    file_content, err = get_file_content source, path
    if err?
      log err
      any_failed = true
      continue

    debug "got #{#file_content}B"
    file = fs.open path, 'w'
    if not file?
      error "cannot write to #{path}"
    with file
      .write file_content
      .close!

  if not any_failed
    log 'SUCCESS'

make_sources_url = (args) ->
  { :url_template, :user, :repo, :branch, :folder="" } = args
  if #folder > 0
    folder = "/#{folder}"
  (url_template\gsub '{user}', user)
    \gsub '{repo}', repo
    \gsub '{branch}', branch
    \gsub '{folder}', folder

get_paths = (path, paths={} using nil) ->
  if not fs.isDir path
    error "get_paths must be called with a directory, got #{path}"
  if path == '/rom'
    return paths

  for child in *fs.list path
    child_path = if path != '/'
      "#{path}/#{child}"
    else
      "/#{child}"
    if fs.isDir child_path
      get_paths child_path, paths
    else
      paths[] = child_path
  paths

get_file_content = (repo, path using nil) ->
  assert '/' == path\sub 1, 1
  url = "#{repo}#{path}"
  ok, err = http.checkURL url
  if not ok
    return nil, err

  debug "downloading #{url}..."

  resp = http.get url
  if not resp?
    return nil, 'FAILED'

  debug 'done'

  content = resp\readAll!
  resp\close!
  if not content?
    error 'received content nil for some reason'
  content, nil

log = (message using quiet) ->
  if quiet
    return
  print message

debug = (message using verbose) ->
  if not verbose
    return
  print message

main {...}
