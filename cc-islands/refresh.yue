local *

import ArgParser, Flag, Param from require 'clap'

quiet = false

main = (args) ->
  arg_parser = with ArgParser 'refresh'
    \version '0.1'
    \description 'a downloader of up-to-date files'
    \add_arg with Flag 'quiet'
      \description 'output quietly'
    \add_arg with Param 'source'
      \default 'github.com/TheSignPainter98/big-ol-file-hole'
      \description 'where to get the files from'
  args, ok = arg_parser\parse args
  if not ok
    return
  quiet = args.quiet

  print "quiet: #{args.quiet}"
  print "source: #{args.source}"

  for path in *get_paths '.'
    file_content, err = get_file_content path
    if err?
      error err
    with fs.open path, 'w+'
      \write file_content
      \close!

get_paths = (path, stack={""}, paths={}) ->
  if not fs.isDir path
    error "get_paths must be called with a directory, got #{path}"

  for child in *fs.list path
    child_path = "#{stack[#stack]}/#{child}"
    if fs.isDir child_path
      stack[] = child_path
      get_paths child, stack, paths
      stack[] = nil
    else
      paths[] = child_path
  paths

get_file_content = (path using nil) ->
  url = "#{REPO}/#{path}"
  ok, err = http.checkUrl url
  if not ok
    return err

  log "downloading #{url}..."

  resp = http.get url
  if not response?
    return "failed"

  log 'success'

  content = resp.readAll!
  resp.close!
  if not content?
    error "received content nil for some reason"
  content

log = (message using quiet) ->
  if quiet
    return
  write message

main {...}
