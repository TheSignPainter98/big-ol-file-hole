local *

import ArgParser, Flag, Param from require 'clap'

quiet = false

main = (args) ->
  arg_parser = with ArgParser 'refresh'
    \version '0.1'
    \description 'a downloader of up-to-date files'
    \add_arg with Flag 'quiet'
      \description 'output quietly'
    \add_arg with Param 'source'
      \default 'https://raw.githubusercontent.com/TheSignPainter98/big-ol-file-hole/master/cc-islands'
      \description 'where to get the files from'
  args, ok = arg_parser\parse args
  if not ok
    return
  quiet = args.quiet


  log "downloading files from #{args.source}"
  any_failed = false
  for path in *get_paths '/'
    log "downloading #{path}..."
    file_content, err = get_file_content args.source, path
    if err?
      log err
      any_failed = true
      continue
    log "writing content to #{path}..."
    print file_content
    -- file = fs.open path, 'w'
    -- if not file?
    --   error "cannot write to #{path}"
    -- with file
    --   \write file_content
    --   \close!

  if not any_failed
    log 'success'

get_paths = (path, paths={} using nil) ->
  if not fs.isDir path
    error "get_paths must be called with a directory, got #{path}"
  if path == '/rom'
    return paths

  for child in *fs.list path
    child_path = if path != '/'
      "#{path}/#{child}"
    else
      "/#{child}"
    if fs.isDir child_path
      get_paths child_path, paths
    else
      paths[] = child_path
  paths

get_file_content = (repo, path using nil) ->
  assert '/'  == path\sub 1, 1
  url = "#{repo}#{path}"
  ok, err = http.checkURL url
  if not ok
    return nil, err

  log "downloading #{url}..."

  resp = http.get url
  if not response?
    return nil, "failed"

  log 'success'

  content = resp\readAll!
  resp\close!
  if not content?
    error "received content nil for some reason"
  content, nil

log = (message using quiet) ->
  if quiet
    return
  print message

main {...}
